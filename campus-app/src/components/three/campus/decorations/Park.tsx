/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';

import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader';
import { getPublicPath } from '../../../../utils/getPublicPath';
import { useConfiguredGLTF } from '../../../../hooks/useConfiguredGLTF';
import { Dims2 } from '../../../../types';

type GLTFResult = GLTF & {
  nodes: {
    Grass006_1: THREE.Mesh;
    Grass006_2: THREE.Mesh;
    Grass006_3: THREE.Mesh;
  };
  materials: {
    Grass: THREE.MeshStandardMaterial;
    Wood: THREE.MeshStandardMaterial;
    Tree: THREE.MeshStandardMaterial;
  };
};

interface ParkProps {
  position: Dims3;
  type: '1' | '2';
  rotationY: number;
  scale: number;
}

export default function Park({ position, type, rotationY = 0, scale }) {
  const group = useRef<THREE.Group>();
  const { scene } = useConfiguredGLTF(`${getPublicPath()}/3d/block/park${type}.glb`) as GLTFResult;
  return (
    <group
      ref={group}
      scale={[scale, scale, scale]}
      position={position}
      rotation={[0, rotationY, 0]}
      dispose={null}
    >
      <primitive object={scene} />
    </group>
    // <group ref={group} {...props} dispose={null}>
    //   <group position={[3.29, 3.07, 0.33]} rotation={[Math.PI / 2, 0, 0]} scale={[0.87, 0.87, 0.87]}>
    //     <mesh material={materials.Grass} geometry={nodes.Grass006_1.geometry} />
    //     <mesh material={materials.Wood} geometry={nodes.Grass006_2.geometry} />
    //     <mesh material={materials.Tree} geometry={nodes.Grass006_3.geometry} />
    //   </group>
    // </group>
  );
}

useGLTF.preload(`${getPublicPath()}/3d/block/park1.glb`);
useGLTF.preload(`${getPublicPath()}/3d/block/park2.glb`);
