/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useState, useEffect, useMemo } from 'react';
import { useFrame, useLoader } from 'react-three-fiber';
import { useGLTF } from '@react-three/drei';

import { useAnimations } from '@react-three/drei';
import { GLTF, GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { SkinnedMesh } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    Book_0: THREE.SkinnedMesh;
    Armature_rootJoint: THREE.Bone;
  };
  materials: {
    Base: THREE.MeshStandardMaterial;
  };
};

type ActionName = 'Take 01_Armature' | 'Take 01';
type GLTFActions = Record<ActionName, THREE.AnimationAction>;

export default function Book(props: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();
  const { nodes, materials, animations, scene } = useLoader(
    GLTFLoader,
    './public/3d/book/book.gltf'
  ) as GLTFResult;
  const { actions } = useAnimations(animations, group);

  const copiedNodes = useMemo(() => {
    const clonedScene = scene.clone(true);

    const Book_0 = clonedScene.children[0].children[0].children[0].children[0].children[2];

    const Armature_rootJoint = clonedScene.children[0].children[0].children[0].children[0].children[1];
    // return {
    //   Book_0:clonedScene.children[0].children[0].children[0].children[0].children[2]
    // }
    return {
      Book_0,
      Armature_rootJoint,
    };
  }, [scene]);

  useEffect(() => {
    console.log('nodes.Book_0', nodes.Book_0);
    // console.log('actions', actions);
    // actions['Take 01'].play();
    console.log('nodes', nodes);
    console.log('copiedNodes', copiedNodes);
  }, [copiedNodes]);

  // const copiedBookNode = useMemo(() => {
  //   nodes.Book_0.
  // }, [nodes]);

  return (
    <>
      <group ref={group} dispose={null}>
        {/* <primitive object={copiedNodes} {...props} /> */}
        <group name='RootNode_(gltf_orientation_matrix)'>
          <primitive object={copiedNodes.Armature_rootJoint} />
          <skinnedMesh
            material={materials.Base}
            geometry={copiedNodes.Book_0.geometry}
            skeleton={copiedNodes.Book_0.skeleton}
          />
          <group position={[4.08, 1.01, 5.9]} rotation={[-0.27, 0.6, 1.93]} scale={[1, 1, 1]} />
        </group>
      </group>
    </>
  );
}

useGLTF.preload('./public/3d/book/book.gltf');
